<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://xmlns.jcp.org/jsf/html">
<h:head>
	<meta name="Author" content="Sergio Rojo Herrero" />
	<meta name="Description"
		content="This is my project to learn JSF following the magnificient tutorial availble on http://www.coreservlets.com/" />
	<meta name="keywords"
		content="Java, Java EE, JEE, J2EE, FOSS, FLOSS, Tomcat, Eclipse" />
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<link rel="stylesheet" href="../css/main.css" type="text/css" />
	<script
		src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
	<script src="../js/main.js" type="text/javascript" />
	<title>My Way to Learn JSF</title>
</h:head>
<h:body>
	<div class="header">
		<h1>Hello and Wellcome</h1>
		<p>Here are the exercises I did to learn JSF</p>
		<p>
			I'm follow the wonderful tutorial available on <a
				href="http://www.coreservlets.com/JSF-Tutorial/jsf2/"
				title="Link to the tutorial homepage">JSF 2 with Facelets, Ajax,
				and PrimeFaces</a>
		</p>
	</div>

	<div class="js-test-zone">
		<button id="timebutton" onclick="semana()">Show me today date</button>
		<div class="today-info">
			<div id="date"></div>
			<div id="time"></div>
		</div>
	</div>

	<div class="content">

		<!--  -->

		<div class="lesson">
			<h2>Programming Basics</h2>
			<p>These to exercise are "doped", because I use methods teached
				in following lessons</p>
			<div class="exercise">
				<h3>Exercise 1</h3>
				<div class="description">
					<p>Implement the following navigation flow. You start at a.jsf,
						press a button, and randomly get either b.jsf or defeat.jsf. From
						page b, after pressing a button you randomly get c.jsf or
						defeat.jsf. From page c, after pressing a button you randomly get
						vi ctory.jsf or defeat.jsf.</p>
				</div>
				<div class="link-div-contaner">
					<h:link outcome="/xhtml/pb/a" value="Let's go to the Game"
						styleClass="exercise-link" />
				</div>
			</div>
			<div class="exercise">
				<h3>Exercise 2</h3>
				<p>Make a page that collects a first name and a last name. If
					either the first or last name is missing (i.e., an empty string),
					show an error page. If both the names are there, go to a results
					page</p>
				<div class="link-div-contaner">
					<h:link outcome="/xhtml/pb/name-input"
						value="Go to the Registering Name" styleClass="exercise-link" />
				</div>
			</div>
		</div>

		<!--  -->

		<div class="lesson">
			<h2>Manage Beans I</h2>
			<div class="exercise">
				<h3>Exercise 1</h3>
				<p>Make a form to gather an employee name, employee ID, and the
					name of a health plan to sign up for. If all three values are
					present (i.e., are something other than empty strings), display a
					confirmation page that says “You are registered for the health
					plan” and that shows the name, ID, and health plan. If any of the
					inputs are missing, display a page that says “Missing Input Data”.</p>
				<div class="link-div-contaner">
					<h:link value="Health Plan v1"
						outcome="/xhtml/mb1/input-health-plan1" styleClass="exercise-link" />
				</div>
			</div>
			<div class="exercise">
				<h3>Exercise 2</h3>
				<p>Make a new form that works similarly to the old one. This
					time, however, verify that the health plan entered is really one of
					the available health plans. Give an error message (e.g., “CMS Prime
					is not an available health plan”) for unknown health plans. In the
					confirmation page, also show the monthly premium and contact phone
					number for that health plan (in addition to the data shown
					earlier). This requirement means that you need some simple business
					logic to map a health plan name to a HealthPlan object.</p>
				<div class="link-div-contaner">
					<h:link outcome="/xhtml/mb1/input-health-plan2"
						value="Health Plan v2" styleClass="exercise-link" />
				</div>
			</div>
		</div>

		<!--  -->

		<div class="lesson">
			<h2>Manage Beans II</h2>
			<div class="exercise">
				<h3>Exercise 3</h3>
				<p>Make an app where you select one of three names (Cay, David,
					Marty) and show the selection in the results page. Use a listbox or
					set of radio buttons, not a dropdown menu. Be sure there is an
					initial selection.</p>
				<div class="link-div-contaner">
					<h:link outcome="/xhtml/mb2/name-selection1"
						value="Name Selection v1" styleClass="exercise-link" />
				</div>
			</div>
			<div class="exercise">
				<h3>Exercise 4</h3>
				<div>
					<p>Make a similar app, but with two differences</p>
					<ul>
						<li>Use a dropdown menu</li>
						<li>Select among Cay, David, and Marty, but for the results,
							show one of Cay Horstmann, David Geary, or Marty Hall.</li>
					</ul>
				</div>
				<div class="link-div-contaner">
					<h:link outcome="/xhtml/mb2/name-selection2"
						value="Name Selection v2" styleClass="exercise-link" />
				</div>
			</div>
			<div class="exercise">
				<h3>Exercise 5</h3>
				<h4>Not yet finished</h4>
				<div>
					<p>Copy your code for the health plan from the previous set of
						exercises. However, instead of using a textfield for the health
						care provider, provide a drop down menu that shows a list of the
						available options.</p>
				</div>
				<div class="link-div-contaner">
					<h:link outcome="/xhtml/mb2/healthplan-input"
						value="Health Plan with list menus" styleClass="exercise-link" />
				</div>
			</div>
		</div>

		<!--  -->

		<div class="lesson">
			<h2>Manage Beans III</h2>
			<div class="exercise">
				<h3>Exercise 1</h3>
				<p>Make a form that collects a preferred fo reground and
					background color. Display all of the pages in the
					a-b-c-victory-defeat a pp in those colors. Ig nore empty strings,
					and don’t let the foreground and background colors be the same.</p>
				<div class="link-div-contaner">
					<h:link outcome="/xhtml/mb3/color-selection" value="Let's go"
						styleClass="exercise-link" />
				</div>
			</div>
			<div class="exercise">
				<h3>Exercise 2</h3>
				<p>Make a form that collects a search query and randomly shows
					either the Google results (https://www.google.co m/#q=blah) or the
					Bing results (http://www.bing.com/ search?q=blah).</p>
				<div class="link-div-contaner">
					<h:link outcome="/xhtml/mb3/search-form" value="Let's go"
						styleClass="exercise-link" />
				</div>
			</div>
		</div>

		<!--  -->

		<div class="lesson">
			<h2>Explicit Page Navigation and faces-config.xml</h2>
			<p>I've used this lesson before, so, I skip this</p>
		</div>

		<!--  -->

		<div class="lesson">
			<h2>Expression Language</h2>
			<div class="exercise">
				<h3>Exersices 1 &amp; 2</h3>
				<p>Make a bean with a getFavoriteColors method th at returns an
					array of four colors. Make a JSF page that prints out the colors.
					Unless you know ui:repeat, your page will need to assume that there
					are exactly four colors.</p>
				<p>I join the exercise 1 and two into this one</p>
				<div class="link-div-container">
					<h:link outcome="/xhtml/el/colors" value="Render colors"
						styleClass="exercise-link" />
				</div>
			</div>
			<div class="exercise">
				<h3>Exercise 3</h3>
				<p>Make a very small HashMap that associat es employee IDs
					(e.g., “a1234”) with employee names (e.g., “Harry Hacker”). Make a
					method th at returns the Map, then in the facelets page, output the
					names for a few specific IDs.</p>
				<div class="link-div-container">
					<h:link outcome="/xhtml/el/employees" value="Render employees Data"
						styleClass="exercise-link" />
				</div>
			</div>
			<div class="exercise">
				<h3>Exercise 4</h3>
				<p>Make a getter method that outputs an array of numbers (hint:
					use Integer instead of int), some of which are negative and some of
					which are positive. Output the non-negative ones in a bulleted
					list. Ignore the negative ones.</p>
				<div class="link-div-container">
					<h:link outcome="/xhtml/el/numbers" value="Render Numbers"
						styleClass="exercise-link" />
				</div>
			</div>
		</div>

		<!--  -->

		<div class="lesson">
			<h2>Properties Files and I18N</h2>
			<div class="exercise">
				<h3>Exercise 1</h3>
				<p>Create a form that collects a first name, last name, and
					email address. Use a properties file for the prompts and button
					label. There is no need to connect the form to any real action
					controller or have any navigation rules. Also, you do not need to
					use properties with parameters (e.g, {0}, {1}): simple strings are
					sufficient.</p>
				<div class="link-div-container">
					<h:link outcome="/xhtml/PF_and_I18N/info-input"
						value="First Try" styleClass="exercise-link" />
				</div>
			</div>
			<div class="exercise">
				<h3>Exercise 2</h3>
				<p>Description</p>
			</div>
			<div class="exercise">
				<h3>Exercise 3</h3>
				<p>Description</p>
			</div>
			<div class="exercise">
				<h3>Exercise 4</h3>
				<p>Description</p>
			</div>
		</div>
	</div>
</h:body>
</html>